#!/usr/bin/env perl

############################################################################
# FILE:                git-combine-merges                                  #
# DESCRIPTION:         Combines a linear series of merges into one merge   #
# AUTHOR:              Jonathan G. Rennison <j.g.rennison@gmail.com>       #
# LICENSE:             New BSD License, see LICENSE.txt                    #
#                                                                          #
# Copyright Â© Jonathan G. Rennison 2016                                    #
############################################################################

use strict;
use warnings;

use Proc::Hevy;
use Getopt::Long;
use File::Temp qw(tempfile);
use File::Slurp;


sub usage {
	my ($fh, $retcode) = @_;
	$fh //= \*STDERR;
	$retcode //= 1;
	print $fh <<'EOF';
usage: git combine-merges [options] <commit>

    -e, --edit            edit commit message
    -b, --branch <branch> replace all uses of HEAD with <branch>
    -f, --force           perform fewer checks, see -s/--second-parent
    -n, --dry-run         print the new commit hash instead of resetting HEAD
    -v, --verbose         be verbose
    -h, -?, --help        show this help

    -s, --second-parent <commit2>
        use <commit2> as the new merge's second parent, it must have the
        same tree as HEAD's current second parent, unless -f/--force is used

    -o, --octopus-parent <commitN>
        use commitN as the new merge's Nth parent (starting from third),
        this option may be used more than once, the commit is not checked

    -m, --message-commit <commitM>
        set the new merge's commit message to commitM's message,
        the message is not modified to add conflict lines.

This replaces a linear sequence of merges from <commit> to HEAD,
with a single merge of <commit> and HEAD's second parent (or -s <commmit2>).
<commit> must be an ancestor of HEAD's first parent.
HEAD must be a merge with two parents.
The merges replaced are those given by `git log --ancestry-path <commit>..HEAD`
The new merge has the same tree as HEAD.
The new merge's commit message is HEAD's, plus any conflict
messages from the replaced merges (unless -m/--message-commit is used).
This does not touch the index or working tree.
A warning is output if a replaced merge has a parent not reachable
from the new merge.

Starting from:            `git combine-merges B` produces:
  D---E---F                 D---E---F
 /     \   \     --->      /         \
A---B---C---@             A---B-------@'

Starting from:            `git combine-merges B` produces:
    F----
   /     \                  D---F
  D---E   \      --->      /     \
 /     \   \              A---B---@'
A---B---C---@             and a warning about E

EOF
	exit $retcode;
}

my ($edit, $force, $help, $dry_run, $second_parent, $branch, @octopus_parent, $message_commit);
my $verbose = 0;

Getopt::Long::Configure("no_auto_abbrev", "bundling");
GetOptions (
	"edit|e"       => \$edit,
	"branch|b=s"   => \$branch,
	"force|f"      => \$force,
	"dry-run|n"    => \$dry_run,
	"help|h|?"     => \$help,
	"verbose|v+"   => \$verbose,
	"second-parent|s=s"  => \$second_parent,
	"octopus-parent|o=s"  => \@octopus_parent,
	"message-commit|m=s"  => \$message_commit,
) or usage();

usage(\*STDOUT, 0) if $help;

usage() unless scalar @ARGV;
if (scalar @ARGV > 1) {
	print STDERR "Expected a single revision argument\n\n";
	usage();
}

my ($branch_commit, $branch_name, $branch_ref, $status_branch);
if (defined $branch) {
	$branch_name = $branch;
	$branch_ref = "refs/heads/$branch";
	$status_branch = exec_wrapper(
		command => [qw(git show-ref --hash --verify), $branch_ref],
		stdout  => \$branch_commit,
		stderr  => \*STDERR,
	);
} else {
	$branch_name = "HEAD";
	$branch_ref = "HEAD";
	$status_branch = exec_wrapper(
		command => [qw(git rev-parse --verify @)],
		stdout  => \$branch_commit,
		stderr  => \*STDERR,
	);
}
exit($status_branch << 8) if $status_branch;
chomp $branch_commit;

my $input_ref = $ARGV[0] // usage();

my $rev;
my $status_rev_parse = exec_wrapper(
	command => [qw(git rev-parse --verify), "$input_ref^{commit}"],
	stdout  => \$rev,
	stderr  => \*STDERR,
);
exit($status_rev_parse << 8) if $status_rev_parse;
chomp $rev;

my $status_rev_ancestor = exec_wrapper(
	command => [qw(git merge-base --is-ancestor), $rev, "$branch_commit^"],
	stderr  => \*STDERR,
);
if ($status_rev_ancestor) {
	fatal_rev("'$input_ref' is not an ancestor of ${branch_name}'s first parent", $rev);
}

my $log_str;
my $status_rev_log = exec_wrapper(
	command => [qw(git log --ancestry-path --pretty=tformat:%H%x00%P%x00%B%x00%x00%x00 -z), "$rev..$branch_commit"],
	stdout  => \$log_str,
	stderr  => \*STDERR,
);
exit($status_rev_log << 8) if $status_rev_log;

my @revs;
my %seen_parents;
for my $rev_str (split(/\000{4}/, $log_str)) {
	my ($hash, $parents, $msg) = split(/\000/, $rev_str, -1);
	my @parent_revs = split(/\s+/, $parents);
	push @revs, {
		hash => $hash,
		msg => $msg,
		parents => \@parent_revs,
	};
	$seen_parents{$_} = 1 for @parent_revs;
}

my %revs_hash = map { $_->{hash} => 1 } @revs;

if (scalar @revs == 0) {
	fatal("No commits found");
}

my ($head_rev, @non_head_revs) = @revs;

if (scalar @{ $head_rev->{parents} } != 2) {
	fatal_rev("$branch_name is not a merge with exactly 2 parents", $head_rev->{hash});
}
for (@non_head_revs) {
	if (scalar @{ $_->{parents} } < 2) {
		fatal_rev("Commit to be combined is not a merge", $_->{hash});
	}
}

if (defined $second_parent) {
	my ($head_p2_tree, $sp_tree);
	my $status_head = exec_wrapper(
		command => [qw(git log --pretty=format:%T), "$branch_commit^2^!"],
		stdout  => \$head_p2_tree,
		stderr  => \*STDERR,
	);
	exit($status_head << 8) if $status_head;
	my $status_sp = exec_wrapper(
		command => [qw(git log --pretty=format:%T), "$second_parent^!"],
		stdout  => \$sp_tree,
		stderr  => \*STDERR,
	);
	exit($status_sp << 8) if $status_sp;
	if ($head_p2_tree ne $sp_tree) {
		print STDERR $force ? "Warning: " : "Fatal :";
		print STDERR "Specified second parent does not match $branch_name^2\n\t";
		log_rev_line($second_parent);
		print STDERR "\t";
		log_rev_line("$branch_commit^2");
		exit 1 unless $force;
	}
}

for (keys %seen_parents) {
	next if exists $revs_hash{$_};
	next if $_ eq $rev;

	my $status = exec_wrapper(
		command => [qw(git merge-base --is-ancestor), $_, $head_rev->{parents}->[1]],
		stderr  => \*STDERR,
	);
	if ($status) {
		print STDERR "Warning: commit referenced by the current $branch_name will not be referenced by the new $branch_name\n\t";
		log_rev_line($_);
	}
}

my %conflict_lines;
for (@revs) {
	# process commit messages
	my @lines = split("\n", $_->{msg}, -1);
	my @saved_lines;
	while (defined(my $line = shift @lines)) {
		chomp $line;
		if ($line eq "# Conflicts:") {
			pop @saved_lines while $saved_lines[-1] eq "";
			while (defined(my $conflict_line = shift @lines)) {
				last unless $conflict_line =~ /^#\t/;
				$conflict_lines{$conflict_line} = 1;
			}
			last;
		} else {
			push @saved_lines, $line;
		}
	}
	push @saved_lines, @lines;
	pop @saved_lines while $saved_lines[-1] eq "";
	$_->{saved_msg_lines} = \@saved_lines;
}

my $new_msg_str;
if (defined $message_commit) {
	my $status_mc = exec_wrapper(
		command => [qw(git log --pretty=tformat:%B), "$message_commit^!"],
		stdout  => \$new_msg_str,
		stderr  => \*STDERR,
	);
	exit($status_mc << 8) if $status_mc;
} else {
	# generate new message, with deduped conflict lines from all combined merges
	my @new_msg = @{ $head_rev->{saved_msg_lines} };
	if (scalar %conflict_lines) {
		push @new_msg, "", "# Conflicts:", sort(keys %conflict_lines), "";
	}
	$new_msg_str = join("\n", @new_msg);
}

if ($edit) {
	my ($fh, $filename) = tempfile('git-combine-merges-edit-message-XXXXXXXX', UNLINK => 1);
	print $fh $new_msg_str;
	system('git', 'editor', $filename) == 0 or fatal("Could not edit commit message");
	$new_msg_str = read_file($filename);
}

my $new_rev;
my @extra;
push @extra, ('-p', $_) for @octopus_parent;
my $status_commit = exec_wrapper(
	command => [qw(git commit-tree -p), $rev, '-p', $second_parent // "$branch_commit^2", @extra, '-m', $new_msg_str, "$branch_commit^{tree}"],
	stdout  => \$new_rev,
	stderr  => \*STDERR,
);
exit($status_commit << 8) if $status_commit;
chomp $new_rev;

if ($dry_run) {
	print "\nNot resetting $branch_name.\n\nNew commit: '$new_rev'\n";
	exit 0;
}

my $status_reset = exec_wrapper(
	command => [qw(git update-ref -m), "git-combine-merges: resetting $branch_name to $new_rev", $branch_ref, $new_rev, $branch_commit],
	stderr  => \*STDERR,
);
exit($status_reset << 8) if $status_reset;

exit 0;

sub exec_wrapper {
	my %opts = @_;
	if ($verbose >= 1) {
		my $command;
		eval {
			require String::ShellQuote;
			$command = String::ShellQuote::shell_quote(@{ $opts{command} });
		};
		$command = join(" ", @{ $opts{command} }) unless defined $command;
		print STDERR "Executing: $command\n";
	}
	my $status = Proc::Hevy->exec(%opts);
	if ($verbose >= 2 && defined $opts{stdout} && ref $opts{stdout} eq "SCALAR") {
		print STDERR "STDOUT: '" . ${ $opts{stdout} } . "'\n";
	}
	return $status;
}

sub log_rev_line {
	my ($rev) = @_;
	Proc::Hevy->exec(
		command => [qw(git log --oneline), "$rev^!"],
		stdout  => \*STDERR,
		stderr  => \*STDERR,
	);
}

sub fatal {
	my ($msg) = @_;
	print STDERR "$msg\n";
	exit 1;
}

sub fatal_rev {
	my ($msg, $rev) = @_;
	print STDERR "$msg\n\t";
	log_rev_line($rev);
	exit 1;
}
